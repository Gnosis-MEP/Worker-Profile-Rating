stages:
  - build
  - test
  - benchmark
  - tag-latest
  - multiarch

variables:
  SERVICE_STREAM_KEY: wpr-data
  BENCHMARK_TEMPLATE_NAME: default
  LOGGING_LEVEL: DEBUG
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

Build Image:
  image: jonoh/docker-buildx-qemu
  stage: build
  services:
    - docker:19.03.0-dind
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME} || echo 'No previous image to download as a base'
    - docker build -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}" --build-arg SIT_PYPI_USER_VAR="$SIT_PYPI_USER" --build-arg SIT_PYPI_PASS_VAR="$SIT_PYPI_PASS" .
    - docker push "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}"
  except:
    - tags

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}
  script:
  - cd $CI_PROJECT_DIR
  - pip install -e .
  - python --version
  - pipenv --version
  - ./run_tests.sh

Send to benchmark:
  stage: benchmark
  image: python:3.6
  script:
    - "curl -H \"PRIVATE-TOKEN: $SIT_TOKEN\" \"https://gitlab.insight-centre.org/api/v4/projects/2180/repository/files/test_benchmark_from_template.py/raw?ref=master\" -o test_benchmark_from_template.py"
    - python test_benchmark_from_template.py ${BENCHMARK_PLATFORM_CONTROLLER_URL} ${BENCHMARK_TEMPLATE_NAME} worker-profile-rating $CI_REGISTRY_IMAGE $CI_COMMIT_REF_NAME
  when: manual
  allow_failure: false

Tag Latest:
  stage: tag-latest
  image: jonoh/docker-buildx-qemu

  services:
    - docker:19.03.0-dind
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}"
    - docker tag "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}" $CI_REGISTRY_IMAGE:latest
    - docker push "$CI_REGISTRY_IMAGE:latest"

build multiarch:
  stage: multiarch
  image: jonoh/docker-buildx-qemu
  services:
    - docker:19.03.0-dind
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # Use docker-container driver to allow useful features (push/multi-platform)
    - docker buildx create --driver docker-container --use
    - docker buildx inspect --bootstrap
  script:
    - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
    - docker buildx build --platform linux/arm64,linux/amd64 --pull -t "$CI_REGISTRY_IMAGE:multiarch" --push --build-arg SIT_PYPI_USER_VAR="$SIT_PYPI_USER" --build-arg SIT_PYPI_PASS_VAR="$SIT_PYPI_PASS" .
  when: manual
  tags:
    - multiarch